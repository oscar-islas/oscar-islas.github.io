{"version":3,"sources":["images/code.jpg","components/sidebar-menu/sidebar-menu-component.jsx","components/slider/slider-component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","list","width","justifyContent","display","textAlign","flexDirection","height","fullList","SidebarMenu","anchor","classes","React","useState","top","left","bottom","right","state","setState","toggleDrawer","open","event","type","key","Fragment","Drawer","onClose","className","clsx","role","onClick","onKeyDown","List","map","text","index","ListItem","button","ListItemIcon","ListItemText","primary","Slider","options","strings","this","props","typeSpeed","backSpeed","typed","Typed","el","destroy","setInterval","reset","style","backgroundImage","CodeImg","whiteSpace","ref","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,mVCarCC,G,MAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,IACPC,eAAgB,gBAChBC,QAAS,OACTC,UAAW,SACXC,cAAe,SACfC,OAAQ,QAEVC,SAAU,CACRN,MAAO,WAII,SAASO,IACtB,IAgBcC,EAhBRC,EAAUZ,IADoB,EAEVa,IAAMC,SAAS,CACvCC,KAAK,EACLC,MAAM,EACNC,QAAQ,EACRC,OAAO,IAN2B,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAS9BC,EAAe,SAACV,EAAQW,GAAT,OAAkB,SAACC,IACnB,YAAfA,EAAMC,MAAqC,QAAdD,EAAME,KAA+B,UAAdF,EAAME,MAI9DL,EAAS,eAAKD,EAAN,eAAcR,EAASW,OAqCjC,OACE,6BACE,kBAAC,IAAMI,SAAP,CAAgBD,IAAK,QAEnB,kBAACE,EAAA,EAAD,CAAQhB,OAAQ,OAAQW,KAAMH,EAAK,KAAUS,QAASP,EAAa,QAAQ,KAtCnEV,EAuCA,OAtCZ,yBACEkB,UAAWC,YAAKlB,EAAQV,KAAT,eACZU,EAAQH,SAAsB,QAAXE,GAA+B,WAAXA,IAE1CoB,KAAK,eACLC,QAASX,EAAaV,GAAQ,GAC9BsB,UAAWZ,EAAaV,GAAQ,IAE9B,6BACI,2CACA,qDAEN,kBAACuB,EAAA,EAAD,KAEE,8BAGC,CAAC,kBAAgB,SAAU,aAAaC,KAAI,SAACC,EAAMC,GAAP,OAC3C,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACd,IAAKW,GACpB,kBAACI,EAAA,EAAD,KAAeH,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OACjD,kBAACI,EAAA,EAAD,CAAcC,QAASN,SAM3B,yBAAKP,UAAU,mBACX,4CACA,kBAAC,IAAD,Y,8ECpESc,E,kLACG,IAKZC,EAAU,CACdC,QAHkBC,KAAKC,MAAjBF,QAING,UAAW,GACXC,UAAW,IAGbH,KAAKI,MAAQ,IAAIC,IAAML,KAAKM,GAAIR,K,6CAMhCE,KAAKI,MAAMG,Y,+BAGH,IAAD,OAEL,OADAC,aAAY,kBAAM,EAAKJ,MAAMK,UAAS,MAElC,yBAAK1B,UAAU,OAAO2B,MAAO,CAACC,gBAAgB,OAAD,OAASC,IAAT,OACzC,2CACA,yBAAK7B,UAAU,aACX,0BACA2B,MAAO,CAAEG,WAAY,OACrBC,IAAK,SAACR,GAAS,EAAKA,GAAKA,W,GA7BTvC,IAAMgD,WCA3B,SAASC,IACtB,OACE,oCACE,kBAACpD,EAAD,MACA,kBAAC,EAAD,CACEmC,QAAS,CACP,sBACA,oBACA,+BCDUkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c289437.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/code.833bbfcb.jpg\";","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport './sidebar-styles.css';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n    justifyContent: 'space-between',\r\n    display: 'flex',\r\n    textAlign: 'center',\r\n    flexDirection: 'column',\r\n    height: '100%'\r\n  },\r\n  fullList: {\r\n    width: 'auto'\r\n  },\r\n});\r\n\r\nexport default function SidebarMenu() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    top: false,\r\n    left: true,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n        <div>\r\n            <h3>Oscar Islas</h3>\r\n            <p>Full Stack Developer2</p>\r\n        </div>\r\n      <List>\r\n        \r\n        <div>\r\n            {/* <Button onClick={toggleDrawer('left', true)}>Left</Button> */}\r\n        </div>        \r\n        {['Acerca de mí', 'Skills', 'Proyectos'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n        \r\n        \r\n      </List>      \r\n        <div className=\"social-networks\">\r\n            <h4>Sígueme 2</h4>\r\n            <GitHubIcon />\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <React.Fragment key={'left'}>\r\n        \r\n        <Drawer anchor={'left'} open={state['left']} onClose={toggleDrawer('left', false)}>\r\n          {list('left')}\r\n        </Drawer>\r\n      </React.Fragment>      \r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Typed from 'typed.js';\r\nimport './slider-style.css';\r\nimport CodeImg from '../../images/code.jpg';\r\n\r\nexport default class Slider extends React.Component {\r\n    componentDidMount() {\r\n        // If you want to pass more options as props, simply add\r\n      // your desired props to this destructuring assignment.\r\n      const { strings } = this.props;\r\n      // You can pass other options here, such as typing speed, back speed, etc.\r\n      const options = {\r\n        strings: strings,\r\n        typeSpeed: 50,\r\n        backSpeed: 50\r\n      };\r\n      // this.el refers to the <span> in the render() method\r\n      this.typed = new Typed(this.el, options);\r\n    }\r\n  \r\n    componentWillUnmount() {\r\n        // Make sure to destroy Typed instance on unmounting\r\n      // to prevent memory leaks\r\n      this.typed.destroy();\r\n    }\r\n  \r\n    render() {\r\n        setInterval(() => this.typed.reset(), 8500);\r\n        return (\r\n            <div className=\"wrap\" style={{backgroundImage: `url(${CodeImg})`}}>\r\n                <h2>Oscar Islas</h2>\r\n                <div className=\"type-wrap\">\r\n                    <span\r\n                    style={{ whiteSpace: 'pre' }}\r\n                    ref={(el) => { this.el = el; }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n  }","import React from 'react';\nimport './App.css';\nimport SidebarMenu from './components/sidebar-menu/sidebar-menu-component';\nimport Slider from './components/slider/slider-component';\n\nexport default function App() {\n  return (\n    <>\n      <SidebarMenu />\n      <Slider \n        strings={[\n          'Front End Developer',\n          'Backend Developer',\n          'Web Full Stack Developer'\n        ]}\n      />\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}